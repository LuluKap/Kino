{"version":3,"sources":["utils/helpers.js","components/ProductItem/index.js","utils/actions.js","utils/reducers.js","utils/GlobalState.js","utils/queries.js","assets/spinner.gif","components/ProductList/index.js","components/CategoryMenu/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","utils/auth.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["pluralize","name","count","ProductItem","item","image","_id","price","quantity","className","to","alt","src","UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","reducer","state","action","type","products","categories","currentCategory","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","length","filter","product","category","map","spinner","CategoryMenu","categoryData","onClick","id","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","find","description","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","role","LOGIN","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","variables","mutationResponse","Auth","console","log","handleChange","target","onSubmit","htmlFor","placeholder","onChange","Signup","addUser","firstName","lastName","Nav","loggedIn","href","logout","OrderHistory","user","orders","order","parseInt","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.32ecc522.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","import { useReducer } from \"react\";\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY\n} from \"./actions\";\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState)\n}\n","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers'\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    categories: [],\n    currentCategory: '',\n  });\n\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/spinner.7e729fec.gif\";","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n    }\n  }, [data, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n    }\n  }, [categoryData, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { useStoreContext } from '../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products } = state;\n\n  useEffect(() => {\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    } else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n    }\n  }, [products, data, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button>Add to Cart</button>\n            <button>Remove from Cart</button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\"></span>\n          Kino\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from './utils/GlobalState';\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Routes>\n              <Route \n                path=\"/\" \n                element={<Home />} \n              />\n              <Route \n                path=\"/login\" \n                element={<Login />} \n              />\n              <Route \n                path=\"/signup\" \n                element={<Signup />} \n              />\n              <Route \n                path=\"/orderHistory\" \n                element={<OrderHistory />} \n              />\n              <Route \n                path=\"/products/:id\" \n                element={<Detail />} \n              />\n              <Route \n                path=\"*\"\n                element={<NoMatch />} \n              />\n            </Routes>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}